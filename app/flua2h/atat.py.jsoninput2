from celery import Task
from flua2h.celery import app
import json
import operator
from Bio import SeqIO
from operator import itemgetter

class Atat(Task):
	
	HumanFastaData=[]
	AnimalFastaData=[]
	id=""
	#AnimalFastaFile=""
	#AnimalHunanaFile=""
	#HumanFastaFile=""
	#HumanHunanaFile=""

	def processHunanaData(self,hunanaData):
		hunanaList = []
		highestPosition = 0
		position = 0
		for record in hunanaData['result']:
			if hunanaData['result'][record]=='NOT_ANALYZED':
				continue
			position=record
			support=hunanaData['result'][record]['supports']
			sequence=""
			for seq in hunanaData['result'][record]['sequences']:
				sequence = seq
				record = {'position': position, 'sequence': sequence, 'support': support}
				hunanaList.append(record)
			if int(position) > int(highestPosition):
				highestPosition=int(position)
		return hunanaList, highestPosition

	def simplifyHunanaData(self,highestPosition,hunanaList):
		simplifiedHunanaList = []
		for position in range(5,highestPosition+1):
			positionDic = {'position': position}
			positionList = []
			totalSupport = 0
			for record in hunanaList:
				if int(record['position'])==position:
					totalSupport+=int(record['support'])
					simplifiedDic={'sequence': record['sequence'], 'support': record['support']}
					positionList.append(simplifiedDic)
		
			positionDic['totalSupport']=totalSupport
			positionDic['sequences']=positionList
			simplifiedHunanaList.append(positionDic)

		
		for record in simplifiedHunanaList:
			sortedList = sorted(record['sequences'],key=itemgetter("support"),reverse=True)
			record['sequences']=sortedList

		return simplifiedHunanaList

	def motifIdentification(self,simplifiedHunanaList):
		for record in simplifiedHunanaList:
			count = 1
			for sequence in record['sequences']:
				if int(count)==1:
					if int(sequence['support'])>1:
						sequence['motifShort']="I"
						sequence['motifLong']="Index"
				elif int(count)==2:
					if int(sequence['support'])>1:
						sequence['motifShort']="Ma"
						sequence['motifLong']="Major"	
				else:
					sequence['motifShort']="Mi"
					sequence['motifLong']="Minor"
				if int(sequence['support'])==1:
					sequence['motifShort']="U"
					sequence['motifLong']="Unique"				
				percent=round(100*float(sequence['support'])/float(record['totalSupport']),2)
				sequence['supportPercentage']=percent
				count+=1

		return simplifiedHunanaList

	def getStrain(self,sequences,dataSet):
		listOfStrain=[]
		fastaData=self.AnimalFastaData
		if dataSet=='Human':
			fastaData=self.HumanFastaData
		for data in fastaData:
			if sequences in str(data.seq):
				header=str(data.id).split('|')
				listOfStrain.append(header[0])
		
		return listOfStrain

	
	def run(self,id="",AnimalFastaFile="",AnimalHunanaFile="",HumanFastaFile="",HumanHunanaFile=""):
		AnimalHunanaFileStream=open(AnimalHunanaFile)
		AnimalFastaFileStream=open(AnimalFastaFile)
		HumanHunanaFileStream=open(HumanHunanaFile)
		HumanFastaFileStream=open(HumanFastaFile)	


		AnimalHunanaData=json.load(AnimalHunanaFileStream)
		self.AnimalFastaData=list(SeqIO.parse(AnimalFastaFileStream, "fasta"))
		AnimalHunanaFileStream.close()
		AnimalFastaFileStream.close()
		AnimalHunanaProcessedDataList,AnimalTotalData=self.processHunanaData(AnimalHunanaData)
		SimplifiedAnimalHunanaProcessedDataList=self.simplifyHunanaData(AnimalTotalData,AnimalHunanaProcessedDataList)
		AnimalHunanaProcessedDataListWithMotif=self.motifIdentification(SimplifiedAnimalHunanaProcessedDataList)

		HumanHunanaData=json.load(HumanHunanaFileStream)
		self.HumanFastaData=list(SeqIO.parse(HumanFastaFileStream, "fasta"))
		HumanHunanaFileStream.close()
		HumanFastaFileStream.close()
		HumanHunanaProcessedDataList,HumanTotalData=self.processHunanaData(HumanHunanaData)
		SimplifiedHumanHunanaProcessedDataList=self.simplifyHunanaData(HumanTotalData,HumanHunanaProcessedDataList)
		HumanHunanaProcessedDataListWithMotif=self.motifIdentification(SimplifiedHumanHunanaProcessedDataList)

		jsonFinalResult = {'id':id,'position':{}}
		for animalRecord in AnimalHunanaProcessedDataListWithMotif:
			for humanRecord in HumanHunanaProcessedDataListWithMotif:
				if humanRecord['position']==animalRecord['position']:
					for animalSequence in animalRecord['sequences']:
						data={}
						found=False
						for humanSequence in humanRecord['sequences']:
							if animalSequence['sequence']==humanSequence['sequence']:
								data['sequence']=animalSequence['sequence']
								data['animalMotif']=[animalSequence['motifShort'],animalSequence['motifLong']]
								data['humanMotif']=[humanSequence['motifShort'],humanSequence['motifLong']]
								data['animalSupportPercentage']=animalSequence['supportPercentage']
								data['humanSupportPercentage']=humanSequence['supportPercentage']
								data['humanSupportPercentage']=humanSequence['supportPercentage']
								data['animalStrain']=self.getStrain(animalSequence['sequence'],'Animal')
								data['humanStrain']=self.getStrain(animalSequence['sequence'],'Human')
								data['animalSeqCount']=animalRecord['totalSupport']
								data['humanSeqCount']=humanRecord['totalSupport']
								found=True
								if animalRecord['position'] not in jsonFinalResult['position']:
									jsonFinalResult['position'][animalRecord['position']]=[data]
								else:
									jsonFinalResult['position'][animalRecord['position']].append(data)
								break
						if not found:
							data['sequence']=animalSequence['sequence']
							data['animalSeqCount']=animalRecord['totalSupport']
							data['animalMotif']=[animalSequence['motifShort'],animalSequence['motifLong']]
							data['humanMotif']=['X','None']
							data['animalSeqCount']=animalRecord['totalSupport']
							data['animalSupportPercentage']=animalSequence['supportPercentage']
							data['humanSeqCount']=0
							data['humanSupportPercentage']=0
							data['animalStrain']=self.getStrain(animalSequence['sequence'],'Animal')
							data['humanStrain']=self.getStrain(animalSequence['sequence'],'Human')
							if animalRecord['position'] not in jsonFinalResult['position']:
								jsonFinalResult['position'][animalRecord['position']]=[data]
							else:
								jsonFinalResult['position'][animalRecord['position']].append(data)
		
		return jsonFinalResult
	'''
	def __init__(self,id="",AnimalFastaFile="",AnimalHunanaFile="",HumanFastaFile="",HumanHunanaFile=""):
		self.id=id
		self.AnimalFastaFile=AnimalFastaFile
		self.AnimalHunanaFile=AnimalHunanaFile
		self.HumanFastaFile=HumanFastaFile
		self.HumanHunanaFile=HumanHunanaFile
	'''
