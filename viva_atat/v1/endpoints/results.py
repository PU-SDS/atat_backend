from fastapi import APIRouter, status, HTTPException
from mongoengine import DoesNotExist

from ..helpers import HelperMethods
from ..models import GroupedPosition, MotifTransmissions, MotifTransmission

router = APIRouter(prefix='/results', tags=['results'])


@router.get(
    '/{job_id}/position/count',
    status_code=status.HTTP_200_OK,
    response_description="Returns the total number of kmer positions generated by DiMA.",
)
def get_position_count(job_id: str) -> int:
    """
    Get the total number of kmer positions generated by DiMA. This is also an indication of the number of residues
    in the originally submitted FASTA sequence.

    If the job is not found, an HTTP 404 error is raised. If by some unlikely event the result data is invalid
    (ie: sequence length of host and reservoir are not equal) an HTTP 500 error is raised. If the request is successful
    an HTTP 200 status is returned.
    """

    try:
        job = HelperMethods.get_job(job_id)
    except DoesNotExist:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Job not found, consider creating one.")

    # Upstream we always make sure the lengths of these two are equal. But just to be thorough we check once again
    host_seq_length = len(job.results.host)
    reservoir_seq_length = len(job.results.host)

    # If by some unlikely event they are not equal, we raise an HTTP error
    if host_seq_length == reservoir_seq_length and host_seq_length > 0:
        return host_seq_length

    raise HTTPException(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        detail="The number of kmer positions of host and reservoir are not equal.",
    )


@router.get(
    '/{job_id}/position/{position}/grouped',
    status_code=status.HTTP_200_OK,
    response_model=GroupedPosition,
    response_description="Get a kmer position for both host and reservoir",
)
def get_grouped_position(job_id: str, position: int) -> GroupedPosition:
    """
    Get the total number of kmer positions generated by DiMA. This is also an indication of the number of residues
    in the originally submitted FASTA sequence.

    If the job is not found, an HTTP 404 error is raised. If the kmer position does not exist, an HTTP 404 error
    is raised. If the request is successful an HTTP 200 status is returned.
    """

    try:
        results_id = HelperMethods.get_job(job_id).results.id
        queryset = HelperMethods.get_results_queryset(results_id)
    except DoesNotExist:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Job not found, consider creating one.")

    try:
        position = queryset.get_grouped_position(position)
    except DoesNotExist:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Kmer position does not exist.")

    return GroupedPosition(**position)


@router.get(
    '/{job_id}/switches',
    status_code=status.HTTP_200_OK,
    response_model=MotifTransmissions,
    response_description="Get all the motif transmissions seen between the two datasets",
)
def get_motif_transmissions(job_id: str):
    """
    Get a list of all the motif transmissions seen between the two datasets.

    If the job is not found, an HTTP 404 error is raised. If no motif transmissions have occurred, then an empty array
    will be returned as the value of the key "transmissions" (tip: look at the expected response).
    """

    try:
        job = HelperMethods.get_job(job_id)
    except DoesNotExist:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Job not found, consider creating one.")

    transmissions = [MotifTransmission(**transmission.to_mongo().to_dict()) for transmission in job.results.switches]

    return MotifTransmissions(transmissions=transmissions)


@router.get(
    '/{job_id}/switches/{position}',
    status_code=status.HTTP_200_OK,
    response_model=MotifTransmissions,
    response_description="Get all the motif transmissions seen at a given kmer position",
)
def get_position_motif_transmissions(job_id: str, position: int):
    """
    Get a list of all the motif transmissions seen at a particular kmer position.

    If the job is not found, an HTTP 404 error is raised. If no motif transmissions have occurred, then an empty array
    will be returned as the value of the key "transmissions" (tip: look at the expected response).
    """

    try:
        job = HelperMethods.get_job(job_id)
    except DoesNotExist:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Job not found, consider creating one.")

    transmissions = [
        MotifTransmission(**transmission.to_mongo().to_dict())
        for transmission in job.results.switches
        if transmission.position == position
    ]

    return MotifTransmissions(transmissions=transmissions)
